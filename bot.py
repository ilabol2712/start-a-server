import os
import telebot
import logging
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import time
import sqlite3
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ATERNOS_USER = os.getenv('ATERNOS_USER')
ATERNOS_PASS = os.getenv('ATERNOS_PASS')
ADMIN_ID = os.getenv('ADMIN_ID', '')  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_usage (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            last_used TIMESTAMP,
            usage_count INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

def can_user_start_server(user_id, username):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(
        'SELECT last_used, usage_count FROM user_usage WHERE user_id = ?',
        (user_id,)
    )
    result = cursor.fetchone()
    
    now = datetime.now()
    
    if result:
        last_used = datetime.fromisoformat(result[0])
        usage_count = result[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        time_diff = now - last_used
        
        # –ù–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
        if time_diff < timedelta(minutes=5):
            conn.close()
            return False, f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {5 - time_diff.seconds // 60} –º–∏–Ω—É—Ç"
        
        # –ù–µ –±–æ–ª–µ–µ 10 –∑–∞–ø—É—Å–∫–æ–≤ –≤ –¥–µ–Ω—å
        if usage_count >= 10 and last_used.date() == now.date():
            conn.close()
            return False, "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç 10 –∑–∞–ø—É—Å–∫–æ–≤ –≤ –¥–µ–Ω—å"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if result:
        cursor.execute('''
            UPDATE user_usage 
            SET last_used = ?, usage_count = usage_count + 1, username = ?
            WHERE user_id = ?
        ''', (now.isoformat(), username, user_id))
    else:
        cursor.execute('''
            INSERT INTO user_usage (user_id, username, last_used, usage_count)
            VALUES (?, ?, ?, 1)
        ''', (user_id, username, now.isoformat()))
    
    conn.commit()
    conn.close()
    return True, "‚úÖ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä"

def setup_driver():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ChromeDriver"""
    chrome_options = Options()
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--window-size=1920,1080')
    
    driver = webdriver.Chrome(options=chrome_options)
    return driver

def start_aternos_server():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Aternos"""
    driver = None
    try:
        logger.info("–ó–∞–ø—É—Å–∫ ChromeDriver –¥–ª—è Aternos...")
        driver = setup_driver()
        wait = WebDriverWait(driver, 20)
        
        driver.get("https://aternos.org/go/")
        
        # –õ–æ–≥–∏–Ω
        username_field = wait.until(EC.element_to_be_clickable((By.ID, "user")))
        username_field.send_keys(ATERNOS_USER)
        
        password_field = driver.find_element(By.ID, "password")
        password_field.send_keys(ATERNOS_PASS)
        
        login_button = driver.find_element(By.ID, "login")
        login_button.click()
        
        time.sleep(8)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞
        try:
            error_msg = driver.find_element(By.CLASS_NAME, "error")
            if error_msg.is_displayed():
                return False, "‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ Aternos"
        except NoSuchElementException:
            pass
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
        start_selector = "button.start"
        start_button = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, start_selector)))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        status_element = driver.find_element(By.CLASS_NAME, "statuslabel")
        status_text = status_element.text.lower()
        
        if 'online' in status_text:
            return True, "üü¢ –°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –ú–æ–∂–µ—à—å –∑–∞—Ö–æ–¥–∏—Ç—å!"
        elif 'offline' in status_text and start_button.is_enabled():
            start_button.click()
            time.sleep(3)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            try:
                confirm_btn = driver.find_element(By.CSS_SELECTOR, "button.btn-confirm")
                if confirm_btn.is_displayed():
                    confirm_btn.click()
            except NoSuchElementException:
                pass
            
            return True, "‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è! –ó–∞–π–¥–µ—Ç —á–µ—Ä–µ–∑ 2-5 –º–∏–Ω—É—Ç üöÄ"
        else:
            return False, "‚è≥ –°–µ—Ä–≤–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è"
            
    except TimeoutException:
        return False, "‚è∞ Aternos –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        return False, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    finally:
        if driver:
            driver.quit()

def notify_admin(user_info, result):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞–ø—É—Å–∫–µ"""
    if ADMIN_ID:
        try:
            admin_text = f"üë§ {user_info}\nüîÑ {result}"
            bot.send_message(ADMIN_ID, admin_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start_command(message):
    user = message.from_user
    welcome_text = f"""
üéÆ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ Vibecraft, {user.first_name}!**

–¢—ã –º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞—à Minecraft —Å–µ—Ä–≤–µ—Ä –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å!

**–ö–æ–º–∞–Ω–¥—ã:**
/startserver - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞  
/rules - –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/help - –ü–æ–º–æ—â—å

‚ö° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è 2-5 –º–∏–Ω—É—Ç
üéØ –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∑–∞—Ö–æ–¥–∏ –ø–æ IP –∏–∑ –¥–∏—Å–∫–æ—Ä–¥–∞
    """
    bot.reply_to(message, welcome_text, parse_mode='Markdown')

@bot.message_handler(commands=['startserver'])
def start_server_command(message):
    user = message.from_user
    user_id = user.id
    username = f"@{user.username}" if user.username else user.first_name
    
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∑–∞–ø—É—Å–∫–∞ –æ—Ç {username} (ID: {user_id})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    can_start, reason = can_user_start_server(user_id, username)
    
    if not can_start:
        bot.reply_to(message, reason)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    processing_msg = bot.reply_to(message, 
        f"üîÑ {username}, –∑–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä...\n"
        "–û–∂–∏–¥–∞–π 10-20 —Å–µ–∫—É–Ω–¥ ‚è≥"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    success, result = start_aternos_server()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_text = f"{result}\n\nüë§ –ó–∞–ø—Ä–æ—Å–∏–ª: {username}"
    bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=processing_msg.message_id,
        text=result_text
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_info = f"{username} (ID: {user_id})"
    notify_admin(user_info, result)

@bot.message_handler(commands=['status'])
def status_command(message):
    status_text = """
üìä **–°—Ç–∞—Ç—É—Å Vibecraft**

üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
‚ö° –°–µ—Ä–≤–µ—Ä: Aternos
üéÆ –í–µ—Ä—Å–∏—è: 1.20.1
üë• –ò–≥—Ä–æ–∫–∏: 20 –æ–Ω–ª–∞–π–Ω

üí° –ò—Å–ø–æ–ª—å–∑—É–π /startserver —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
üîó IP –ø–æ–ª—É—á–∏ –≤ –Ω–∞—à–µ–º –¥–∏—Å–∫–æ—Ä–¥–µ
    """
    bot.reply_to(message, status_text, parse_mode='Markdown')

@bot.message_handler(commands=['rules'])
def rules_command(message):
    rules_text = """
üìã **–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**

‚úÖ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –∫–æ–≥–¥–∞ —Ö–æ—á–µ—à—å –∏–≥—Ä–∞—Ç—å
‚è≥ –ù–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 5 –º–∏–Ω—É—Ç  
üéØ –ù–µ –±–æ–ª–µ–µ 10 –∑–∞–ø—É—Å–∫–æ–≤ –≤ –¥–µ–Ω—å
üö´ –ù–µ —Å–ø–∞–º–∏—Ç—å –∫–æ–º–∞–Ω–¥–∞–º–∏

‚ö° –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è 2-5 –º–∏–Ω—É—Ç
üéÆ –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ - –∑–∞—Ö–æ–¥–∏ –∏–≥—Ä–∞—Ç—å!
    """
    bot.reply_to(message, rules_text, parse_mode='Markdown')

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É**

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/startserver - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
/status - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ  
/rules - –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

‚ùì **–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**
Q: –°–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –∑–∞–ø—É—Å–∫?
A: 2-5 –º–∏–Ω—É—Ç

Q: –ì–¥–µ –≤–∑—è—Ç—å IP —Å–µ—Ä–≤–µ—Ä–∞?
A: –í –Ω–∞—à–µ–º Discord —Å–µ—Ä–≤–µ—Ä–µ

Q: –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è?
A: –ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É
    """
    bot.reply_to(message, help_text, parse_mode='Markdown')

@bot.message_handler(commands=['stats'])
def stats_command(message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if str(message.from_user.id) != ADMIN_ID:
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT COUNT(*) FROM user_usage')
    total_users = cursor.fetchone()[0]
    
    cursor.execute('SELECT SUM(usage_count) FROM user_usage')
    total_starts = cursor.fetchone()[0] or 0
    
    cursor.execute('''
        SELECT username, usage_count, last_used 
        FROM user_usage 
        ORDER BY usage_count DESC 
        LIMIT 10
    ''')
    top_users = cursor.fetchall()
    
    conn.close()
    
    stats_text = f"""
üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
üöÄ –í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: {total_starts}

üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
"""
    
    for i, (username, count, last_used) in enumerate(top_users, 1):
        last_used_time = datetime.fromisoformat(last_used).strftime("%d.%m %H:%M")
        stats_text += f"{i}. {username}: {count} –∑–∞–ø—É—Å–∫–æ–≤ ({last_used_time})\n"
    
    bot.reply_to(message, stats_text, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, 
        "ü§î –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º!\n"
        "–ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
if __name__ == '__main__':
    logger.info("=== –ó–∞–ø—É—Å–∫ Vibecraft Bot ===")
    init_db()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        bot.infinity_polling(timeout=60, long_polling_timeout=60)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        time.sleep(60)